* Possible fields for a log message:
  + LEVEL: info, warn, error
  + MESSAGE:
  + PREFIX:
  + RAW_ERROR: Only see this if LEVEL=error
  + SUBJECT: publish, publisherror
* Inplace message filter
** Header
   + [ ] Check for header constraints in-place to avoid memory allocation.
   + [ ] Possible constraints
     - Timestamp
     - Node name
     - Pool name
* Tasks
** Loop thought all log files and find all possible field name.
   + Extract JSON string.
   + Parse JSON string and update possible key list.
** Data structure for scribe log
*** LogMessage
*** MessageHeader
*** MessageBody
** Multi-threaded log parser.
*** Producer
	+ Read trunk of data
	+ Detect the last EOL and pass data to the consumer. Might need to push data into a queue?
*** Consumers
    + Pop data off queue.
	+ Parse data and keep informat that we need.
	+ Update the results (shared data)
*** Store data
	+ Store data into NoSQL database.
	+ Column: date_hour
	+ Key: Message IDs.
	+ Need to have a cache information for message ids.
** Check message life cycle
   + Parse incomming messages.
   + Update message lifecycle table. A vector + a hash table.
   + Print out summary information.
   + Print out outlier.
* Use cases
** Support skip patterns
** Filter message by time stamp.
** Save found message to files in different format.
** Check message life cycle.
** Clustering messages
